package dev.kyle.backend.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.kyle.backend.model.Product;
import dev.kyle.backend.service.FileService;
import dev.kyle.backend.service.ProductService;
import dev.kyle.backend.service.StaticResourceService;

import org.hibernate.query.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.http.MediaType;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping("/api/products")
public class ProductController {
    private StaticResourceService staticResourceService;
    private ProductService productService;
    private FileService fileService;
    @Autowired
    public ProductController(ProductService productService, FileService fileService , StaticResourceService staticResourceService) {
        this.productService = productService;
        this.fileService = fileService;
        this.staticResourceService = staticResourceService;
    }
    
    @GetMapping("/")
    public ResponseEntity<?> index(@RequestParam int page, @RequestParam int size) {
        return ResponseEntity.ok(this.productService.getProducts(page, size));
    }


    @PostMapping(value = "/create", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<String> create(@RequestParam String product, @RequestParam MultipartFile file) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Product p = objectMapper.readValue(product, Product.class);
            this.fileService.uploadFile(file);
            return ResponseEntity.ok(this.staticResourceService.getStaticResourcePath());
        } catch (Exception error) {
            return ResponseEntity.badRequest().body(error.getMessage());
        }
    }
}